How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It showed the places where changes occured in the file, and knowing the
    error was introduced after the former version, the exact place of the error
    is, in fact, one of those changes.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You would have any previous version that a user might liked something
    better than the current version. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Biggest difference is that manual commits will always be working versions,
    whereas auto-save could happen at any point of time leading to non-working
    versions.
    Another one is that one can forget to save, and if something leads to
    the loss of unsaved changes, like empty battery, then auto-save will have
    the most recent saved version of the file.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Code can involve changes in multiple files at once for one logical change.
    Google Docs is not made for code, so it doesn't worry about this.

How can you use the commands git log and git diff to view the history of files?

    git log will show every version and git diff will show two versions'
    differences.

How might using version control make you more confident to make changes that
could break something?

    You can always revert the changes and find out where and when the bug
    was introduced. Therefore, git makes us more confident coders.

Now that you have your workspace set up, what do you want to try using Git for?

    Writing my new programs!